#####
# LONG_ADD
#####
czr:	LONG_ADD(r, rlv)
13
EMIT_INSTRUCTION
EMIT_Commutative(IA32_ADD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), Binary.getVal2(P(p)));

# Prefer LEA as it gives register allocator more freedom and we fold
# it to an ADD in the final expansion when possible. However, LEA won't
# set flags
r:	LONG_ADD(r, rlv)
11
EMIT_INSTRUCTION
if (Binary.getVal2(P(p)).isLongConstant()) { \\
  pushAddress(R(Binary.getVal1(P(p))), null, B_S, Offset.fromLong(VR(p))); \\
} else if (Binary.getVal2(P(p)).isIntConstant()) { \\
  pushAddress(R(Binary.getVal1(P(p))), null, B_S, Offset.fromIntSignExtend(VR(p))); \\
} else { \\
 pushAddress(R(Binary.getVal1(P(p))), R(Binary.getVal2(P(p))), B_S, Offset.zero()); \\
} \\
EMIT_Lea(P(p), Binary.getResult(P(p)), consumeAddress(QW, null, null));

### Memory operands ###
czr:	LONG_ADD(rlv, load64)
15
EMIT_INSTRUCTION
EMIT_Commutative(IA32_ADD, P(p), Binary.getResult(P(p)), Binary.getVal1(P(p)), consumeMO());

czr:	LONG_ADD(load64, rlv)
15
EMIT_INSTRUCTION
EMIT_Commutative(IA32_ADD, P(p), Binary.getResult(P(p)), Binary.getVal2(P(p)), consumeMO());

stm:	LONG_STORE(LONG_ADD(LONG_LOAD(rlv,rlv),rlv),OTHER_OPERAND(rlv, rlv))
ADDRESS_EQUAL(P(p), PLL(p), 17)
EMIT_INSTRUCTION
EMIT_Commutative(IA32_ADD, P(p), MO_S(P(p), QW), MO_S(P(p), QW), Binary.getVal2(PL(p)));

stm:	LONG_STORE(LONG_ADD(rlv,LONG_LOAD(rlv,rlv)),OTHER_OPERAND(rlv, rlv))
ADDRESS_EQUAL(P(p), PLR(p), 17)
EMIT_INSTRUCTION
EMIT_Commutative(IA32_ADD, P(p), MO_S(P(p), QW), MO_S(P(p), QW), Binary.getVal1(PL(p)));

stm:	LONG_ASTORE(LONG_ADD(LONG_ALOAD(rlv,rlv),rlv),OTHER_OPERAND(rlv, rlv))
ARRAY_ADDRESS_EQUAL(P(p), PLL(p), 17)
EMIT_INSTRUCTION
EMIT_Commutative(IA32_ADD, P(p), MO_AS(P(p), QW_S, QW), MO_AS(P(p), QW_S, QW), Binary.getVal2(PL(p)));

stm:	LONG_ASTORE(LONG_ADD(rlv,LONG_ALOAD(rlv,rlv)),OTHER_OPERAND(rlv, rlv))
ARRAY_ADDRESS_EQUAL(P(p), PLR(p), 17)
EMIT_INSTRUCTION
EMIT_Commutative(IA32_ADD, P(p), MO_AS(P(p), QW_S, QW), MO_AS(P(p), QW_S, QW), Binary.getVal1(PL(p)));

