#####
# BOOLEAN_CMP_INT
#####
r:	BOOLEAN_CMP_INT(r,riv)
39
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(P(p), BooleanCmp.getResult(P(p)), \\
   BooleanCmp.getVal1(P(p)), BooleanCmp.getVal2(P(p)), \\
   BooleanCmp.getCond(P(p)));

boolcmp: BOOLEAN_CMP_INT(r,riv)
13
EMIT_INSTRUCTION
ConditionOperand cond = BooleanCmp.getCond(P(p)); \\
pushCOND(cond); \\
EMIT_Compare(P(p), cond, BooleanCmp.getVal1(P(p)), BooleanCmp.getVal2(P(p)));

r:	BOOLEAN_CMP_INT(r,INT_CONSTANT)
VR(p) == 0 && CMP_TO_TEST(BooleanCmp.getCond(P(p))) ? 37:INFINITE
EMIT_INSTRUCTION
EMIT(CPOS(P(p),MIR_Test.create(IA32_TEST, BooleanCmp.getVal1(P(p)), BooleanCmp.getVal1(P(p)).copy())));\\
BOOLEAN_CMP_INT(P(p), BooleanCmp.getResult(P(p)), BooleanCmp.getCond(P(p)));

boolcmp: BOOLEAN_CMP_INT(r,INT_CONSTANT)
VR(p) == 0 && CMP_TO_TEST(BooleanCmp.getCond(P(p))) ? 11:INFINITE
EMIT_INSTRUCTION
pushCOND(BooleanCmp.getCond(P(p))); \\
EMIT(CPOS(P(p),MIR_Test.create(IA32_TEST, BooleanCmp.getVal1(P(p)), BooleanCmp.getVal1(P(p)).copy())));

# Special case where a boolean_cmp can become a shift
r:	BOOLEAN_CMP_INT(r,INT_CONSTANT)
VR(p) == 0 && BooleanCmp.getCond(P(p)).isLESS() ? 11 : INFINITE
EMIT_INSTRUCTION
EMIT_Commutative(IA32_SHR, P(p), BooleanCmp.getResult(P(p)), BooleanCmp.getVal1(P(p)), IC(31));

r:	BOOLEAN_CMP_INT(load32,INT_CONSTANT)
VR(p) == 0 && BooleanCmp.getCond(P(p)).isLESS() ? 16 : INFINITE
EMIT_INSTRUCTION
EMIT_Commutative(IA32_SHR, P(p), BooleanCmp.getResult(P(p)), consumeMO(), IC(31));

r:	BOOLEAN_CMP_INT(r,INT_CONSTANT)
VR(p) == 0 && BooleanCmp.getCond(P(p)).isGREATER_EQUAL() ? 22 : INFINITE
EMIT_INSTRUCTION
RegisterOperand result = BooleanCmp.getResult(P(p)); \\
EMIT_Commutative(IA32_SHR, P(p), result, BooleanCmp.getVal1(P(p)), IC(31)); \\
EMIT(CPOS(P(p),MIR_BinaryAcc.create(IA32_XOR, result.copyRO(), IC(1))));

r:	BOOLEAN_CMP_INT(load32,INT_CONSTANT)
VR(p) == 0 && BooleanCmp.getCond(P(p)).isGREATER_EQUAL() ? 27 : INFINITE
EMIT_INSTRUCTION
RegisterOperand result = BooleanCmp.getResult(P(p)); \\
EMIT_Commutative(IA32_SHR, P(p), result, consumeMO(), IC(31)); \\
EMIT(CPOS(P(p),MIR_BinaryAcc.create(IA32_XOR, result.copyRO(), IC(1))));

r:	BOOLEAN_CMP_INT(cz, INT_CONSTANT)
isZERO(VR(p), 26)
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(P(p), BooleanCmp.getResult(P(p)), BooleanCmp.getCond(P(p)));

boolcmp: BOOLEAN_CMP_INT(cz, INT_CONSTANT)
isZERO(VR(p), 0)
EMIT_INSTRUCTION
pushCOND(BooleanCmp.getCond(P(p)));

r:	BOOLEAN_CMP_INT(szp, INT_CONSTANT)
VR(p) == 0 && EQ_NE(BooleanCmp.getCond(P(p)))?26:INFINITE
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(P(p), BooleanCmp.getResult(P(p)), BooleanCmp.getCond(P(p)));

boolcmp: BOOLEAN_CMP_INT(szp, INT_CONSTANT)
VR(p) == 0 && EQ_NE(BooleanCmp.getCond(P(p)))?0:INFINITE
EMIT_INSTRUCTION
pushCOND(BooleanCmp.getCond(P(p)));

## bit tests
r:	BOOLEAN_CMP_INT(bittest, INT_CONSTANT)
(VR(p) == 0 || VR(p) == 1) && EQ_NE(BooleanCmp.getCond(P(p))) ? 26 : INFINITE
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(P(p), BooleanCmp.getResult(P(p)), BIT_TEST(VR(p),BooleanCmp.getCond(P(p))));

boolcmp:	BOOLEAN_CMP_INT(bittest, INT_CONSTANT)
(VR(p) == 0 || VR(p) == 1) && EQ_NE(BooleanCmp.getCond(P(p))) ? 0 : INFINITE
EMIT_INSTRUCTION
pushCOND(BIT_TEST(VR(p),BooleanCmp.getCond(P(p))));

## chaining of boolcmps
r:	BOOLEAN_CMP_INT(boolcmp, INT_CONSTANT)
(VR(p) == 0 && BooleanCmp.getCond(P(p)).isNOT_EQUAL()) || \
(VR(p) == 1 && BooleanCmp.getCond(P(p)).isEQUAL()) ? 26 : INFINITE
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(P(p), BooleanCmp.getResult(P(p)), consumeCOND());

boolcmp:	BOOLEAN_CMP_INT(boolcmp, INT_CONSTANT)
(VR(p) == 0 && BooleanCmp.getCond(P(p)).isNOT_EQUAL()) || \
(VR(p) == 1 && BooleanCmp.getCond(P(p)).isEQUAL()) ? 0 : INFINITE
NOFLAGS
// use already pushed condition

r:	BOOLEAN_CMP_INT(boolcmp, INT_CONSTANT)
(VR(p) == 1 && BooleanCmp.getCond(P(p)).isNOT_EQUAL()) || \
(VR(p) == 0 && BooleanCmp.getCond(P(p)).isEQUAL()) ? 26 : INFINITE
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(P(p), BooleanCmp.getResult(P(p)), consumeCOND().flipCode());

boolcmp:	BOOLEAN_CMP_INT(boolcmp, INT_CONSTANT)
(VR(p) == 1 && BooleanCmp.getCond(P(p)).isNOT_EQUAL()) || \
(VR(p) == 0 && BooleanCmp.getCond(P(p)).isEQUAL()) ? 0 : INFINITE
EMIT_INSTRUCTION
pushCOND(consumeCOND().flipCode()); // invert already pushed condition

### Memory operands ###
r:	BOOLEAN_CMP_INT(load32,riv)
41
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(PL(p), BooleanCmp.getResult(P(p)), \\
            consumeMO(), BooleanCmp.getVal2(P(p)), \\
	    BooleanCmp.getCond(P(p)));

boolcmp: BOOLEAN_CMP_INT(load32,riv)
15
EMIT_INSTRUCTION
ConditionOperand cond = BooleanCmp.getCond(P(p)); \\
pushCOND(cond); \\
EMIT_Compare(P(p), cond, consumeMO(), BooleanCmp.getVal2(P(p)));

r:	BOOLEAN_CMP_INT(r,load32)
41
EMIT_INSTRUCTION
BOOLEAN_CMP_INT(PR(p), BooleanCmp.getResult(P(p)), \\
            BooleanCmp.getVal1(P(p)), consumeMO(), \\
	    BooleanCmp.getCond(P(p)));

boolcmp: BOOLEAN_CMP_INT(riv,load32)
15
EMIT_INSTRUCTION
ConditionOperand cond = BooleanCmp.getCond(P(p)); \\
pushCOND(cond); \\
EMIT_Compare(P(p), cond, BooleanCmp.getVal1(P(p)), consumeMO());

stm:	BYTE_STORE(boolcmp, OTHER_OPERAND(riv,riv))
15
EMIT_INSTRUCTION | RIGHT_CHILD_FIRST
EMIT(MIR_Set.mutate(P(p), IA32_SET__B, MO_S(P(p),B), COND(consumeCOND())));

stm:	BYTE_ASTORE(boolcmp, OTHER_OPERAND(riv, riv))
15
EMIT_INSTRUCTION | RIGHT_CHILD_FIRST
EMIT(MIR_Set.mutate(P(p), IA32_SET__B, MO_AS(P(p),B_S,B), COND(consumeCOND())));

