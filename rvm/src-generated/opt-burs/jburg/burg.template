/*
 *  This file is part of the Jikes RVM project (http://jikesrvm.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License. You
 *  may obtain a copy of the License at
 *
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  See the COPYRIGHT.txt file distributed with this work for information
 *  regarding copyright ownership.
 */
package org.jikesrvm.compilers.opt.lir2mir.@_ARCH_ADDRESS_@;

import org.jikesrvm.compilers.opt.ir.@_ARCH_@.*;
import org.jikesrvm.classloader.*;

import org.jikesrvm.*;
import org.jikesrvm.runtime.ArchEntrypoints;
import org.jikesrvm.compilers.opt.ir.*;
import org.jikesrvm.compilers.opt.ir.operand.*;
import org.jikesrvm.compilers.opt.ir.operand.@_ARCH_@.*;
import org.jikesrvm.compilers.opt.lir2mir.BURS;
import org.jikesrvm.compilers.opt.OptimizingCompilerException;
import org.jikesrvm.compilers.opt.util.Bits; //NOPMD
import org.jikesrvm.compilers.opt.lir2mir.@_ARCH_@.BURS_Helpers;
import org.jikesrvm.compilers.opt.lir2mir.@_ARCH_ADDRESS_@.BURS_TreeNode;
import org.jikesrvm.compilers.opt.lir2mir.AbstractBURS_TreeNode;
import org.jikesrvm.compilers.opt.lir2mir.BURS_StateCoder;

import org.vmmagic.unboxed.*;
import org.vmmagic.pragma.Inline;
import org.vmmagic.pragma.Pure;

import static org.jikesrvm.compilers.opt.ir.Operators.*;
import static org.jikesrvm.compilers.opt.ir.@_ARCH_@.ArchOperators.*;
import static org.jikesrvm.compilers.opt.lir2mir.@_ARCH_ADDRESS_@.BURS_Definitions.*;
import static org.jikesrvm.compilers.opt.ir.IRTools.*;

/**
 * Machine-specific instruction selection rules.  Program generated.
 *
 * Note: some of the functions have been taken and modified
 * from the file gen.c, from the LCC compiler.
 * See $RVM_ROOT/rvm/src-generated/opt-burs/jburg/COPYRIGHT file for copyright restrictions.
 *
 * @see BURS
 *
 * NOTE: Program generated file, do not edit!
 */
@SuppressWarnings("unused") // Machine generated code is hard to get perfect
public class BURS_STATE extends BURS_Helpers implements BURS_StateCoder {

   public BURS_STATE(BURS b) {
      super(b);
   }

/*****************************************************************/
/*                                                               */
/*  BURS TEMPLATE                                                */
/*                                                               */
/*****************************************************************/

   /* accessors used by BURS */
   private static AbstractBURS_TreeNode STATE(AbstractBURS_TreeNode a) { return a; }

   /***********************************************************************
    *
    *   This file contains BURG utilities
    *
    *   Note: some of the functions have been taken and modified
    *    from the file gen.c, from the LCC compiler.
    *
    ************************************************************************/
   private static void trace(AbstractBURS_TreeNode p, int rule, int cost, int bestcost) {
     if (BURS.DEBUG) {
       VM.sysWriteln(p+" matched "+BURS_Debug.string[rule]+" with cost "+
		     cost+" vs. "+bestcost);
     }
   }

   /**
    * This function will dump the tree
    */
   public static void dumpTree(AbstractBURS_TreeNode p) {
     if (BURS.DEBUG) {
       VM.sysWrite(dumpTree("\n",p,1));
     }
   }

   public static String dumpTree(String out, AbstractBURS_TreeNode p, int indent) {
     if (p == null) return out;
     for (int i=0; i<indent; i++)
       out = out + "   ";
     out = out + p;
     out = out + '\n';
     if (p.getChild1() != null) {
       indent++;
       out = out + dumpTree("",p.getChild1(),indent);
       if (p.getChild2() != null) {
	 out = out + dumpTree("",p.getChild2(),indent);
       }
     }
     return out;
   }

   /**
    * This function will dump the cover of a tree, i.e. the rules
    * that cover the tree with a minimal cost.
    *
    * @param p the root of the tree
    * @param goalnt the non-terminal that is a goal. This is an external rule number 
    */
   public static void dumpCover(AbstractBURS_TreeNode p, byte goalnt, int indent){
      if (BURS.DEBUG) {
	if (p == null) return;
	int rule = STATE(p).rule(goalnt);
	VM.sysWrite(STATE(p).getCost(goalnt)+"\t");
	for (int i = 0; i < indent; i++)
          VM.sysWrite(' ');
	VM.sysWrite(BURS_Debug.string[rule]+"\n");
	for (int i = 0; i < nts[rule].length; i++)
          dumpCover(kids(p,rule,i), nts[rule][i], indent + 1);
      }
   }

   // caution: MARK should be used in single threaded mode,
   @Inline
   public static void mark(AbstractBURS_TreeNode p, byte goalnt) {
     if (p == null) return;
     int rule = STATE(p).rule(goalnt);
     byte act = action(rule);
     if ((act & EMIT_INSTRUCTION) != 0) {
       p.setNonTerminal(goalnt);
     }
     if (rule == 0) {
       if (BURS.DEBUG) {
         VM.sysWrite("marking "+p+" with a goalnt of "+goalnt+" failed as the rule "+rule+" has no action");
       }
       throw new OptimizingCompilerException("BURS","rule missing in ",
						 p.getInstructionString(), dumpTree("",p,1));
     }
     mark_kids(p,rule);
   }
