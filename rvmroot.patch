Index: build.xml
===================================================================
--- build.xml	(revision 12035)
+++ build.xml	(working copy)
@@ -803,8 +803,8 @@
            debugLevel="lines,source"
            source="1.5"
            target="1.5"
-           srcdir="${main.java}:${classlib.library-interface.common.java}:${classlib.library-interface.cpl.java}:${classlib.library-interface.non-cpl.java}"
-           sourcepath="${mmtk.java}:${generated.java}:${generated.config.java}:${generated.arch.java}:${generated.java}:${main.java}:${mmtk-rvm.java}">
+           srcdir="projects/dbt/ext:${main.java}:${classlib.library-interface.common.java}:${classlib.library-interface.cpl.java}:${classlib.library-interface.non-cpl.java}"
+           sourcepath="${mmtk.java}:${generated.java}:${generated.config.java}:${generated.arch.java}:${generated.java}:projects/dbt/ext:${main.java}:${mmtk-rvm.java}">
       <bootclasspath>
         <pathelement location="${classpath.lib.dir}/classpath.jar"/>
       </bootclasspath>
@@ -863,7 +863,7 @@
     </javac>
   </target>
 
-  <target name="package" depends="compile,compile-vmmagic">
+  <target name="package" depends="compile,compile-vmmagic,compile-projects">
     <!-- create a rt.jar for the RVM -->
     <copy file="${classpath.lib.dir}/classpath.jar" tofile="${build.rt.jar}"/>
     <zip destfile="${build.rt.jar}" update="true" basedir="${build.classes}">
@@ -883,7 +883,20 @@
     </jar>
   </target>
 
+  <!-- **************************************************************************** -->
+  <!-- *                                                                          * -->
+  <!-- *             Section for compiling and packaging external projects        * -->
+  <!-- *                                                                          * -->
+  <!-- **************************************************************************** -->
 
+  <target name="compile-projects"
+          depends="compile"
+          description="Build any projects included with the RVM">
+    <subant target="" inheritall="true">
+      <fileset dir="projects" includes="*/build.xml" />
+    </subant>
+  </target>
+
   <!-- **************************************************************************** -->
   <!-- *                                                                          * -->
   <!-- *                Section for building the boot image                       * -->
Index: rvm/src-generated/opt-ir/InstructionFormatList.dat
===================================================================
--- rvm/src-generated/opt-ir/InstructionFormatList.dat	(revision 12035)
+++ rvm/src-generated/opt-ir/InstructionFormatList.dat	(working copy)
@@ -149,6 +149,14 @@
 "U Cond OPT_ConditionOperand" "U BranchProfile OPT_BranchProfileOperand"
 
 
+BooleanCmp2
+1 0 8
+"D Result OPT_RegisterOperand" "U Val1 OPT_Operand" "U Val2 OPT_Operand" \
+"U Cond1 OPT_ConditionOperand" "U BranchProfile1 OPT_BranchProfileOperand" \
+"U Val3 OPT_Operand" "U Val4 OPT_Operand" \
+"U Cond2 OPT_ConditionOperand" "U BranchProfile2 OPT_BranchProfileOperand"
+
+
 CondMove
 1 0 5
 "D Result OPT_RegisterOperand" "U Val1 OPT_Operand" "U Val2 OPT_Operand" \
Index: rvm/src-generated/opt-ir/OperatorList.dat
===================================================================
--- rvm/src-generated/opt-ir/OperatorList.dat	(revision 12035)
+++ rvm/src-generated/opt-ir/OperatorList.dat	(working copy)
@@ -1255,6 +1255,20 @@
 
 
 
+# Compare two sets of two int values and put the boolean OR in the result register
+BOOLEAN_CMP2_INT_OR
+BooleanCmp2
+compare
+
+
+
+# Compare two sets of two int values and put the boolean AND in the result register
+BOOLEAN_CMP2_INT_AND
+BooleanCmp2
+compare
+
+
+
 # Load a singed byte
 # NOTE: Because of our strategy of using explict guard instructions, there is no
 # way in the HIR/LIR that the actual load instruction can except.
Index: rvm/src-generated/opt-burs/ia32/IA32.rules
===================================================================
--- rvm/src-generated/opt-burs/ia32/IA32.rules	(revision 12035)
+++ rvm/src-generated/opt-burs/ia32/IA32.rules	(working copy)
@@ -575,8 +575,9 @@
 boolcmp: BOOLEAN_CMP_INT(r,riv)
 13
 EMIT_INSTRUCTION
-pushCOND(BooleanCmp.getCond(P(p))); \
-EMIT(MIR_Compare.mutate(P(p), IA32_CMP, BooleanCmp.getVal1(P(p)), BooleanCmp.getVal2(P(p))));
+OPT_ConditionOperand cond = BooleanCmp.getCond(P(p)); \
+pushCOND(cond); \
+EMIT_Compare(P(p), cond, BooleanCmp.getVal1(P(p)), BooleanCmp.getVal2(P(p)));
 
 r:	BOOLEAN_CMP_INT(r,INT_CONSTANT)
 VR(p) == 0 && EQ_NE(BooleanCmp.getCond(P(p)))?37:INFINITE
@@ -662,8 +663,9 @@
 boolcmp: BOOLEAN_CMP_INT(load32,riv)
 15
 EMIT_INSTRUCTION
-pushCOND(BooleanCmp.getCond(P(p))); \
-EMIT(MIR_Compare.mutate(PL(p), IA32_CMP, consumeMO(), BooleanCmp.getVal2(P(p)))); 
+OPT_ConditionOperand cond = BooleanCmp.getCond(P(p)); \
+pushCOND(cond); \
+EMIT_Compare(P(p), cond, consumeMO(), BooleanCmp.getVal2(P(p)));
 
 r:	BOOLEAN_CMP_INT(r,load32)
 41
@@ -675,8 +677,9 @@
 boolcmp: BOOLEAN_CMP_INT(r,load32)
 15
 EMIT_INSTRUCTION
-pushCOND(BooleanCmp.getCond(P(p))); \
-EMIT(MIR_Compare.mutate(PR(p), IA32_CMP, BooleanCmp.getVal1(P(p)), consumeMO()));
+OPT_ConditionOperand cond = BooleanCmp.getCond(P(p)); \
+pushCOND(cond); \
+EMIT_Compare(P(p), cond, BooleanCmp.getVal1(P(p)), consumeMO());
 
 stm:	BYTE_STORE(boolcmp, OTHER_OPERAND(riv,riv))
 15
Index: rvm/src/OptDummy.java
===================================================================
--- rvm/src/OptDummy.java	(revision 12035)
+++ rvm/src/OptDummy.java	(working copy)
@@ -20,4 +20,5 @@
   static org.jikesrvm.compilers.opt.OPT_Compiler a;
   static org.jikesrvm.compilers.opt.VM_OptSaveVolatile g;
   static org.jikesrvm.compilers.opt.OPT_SpecializedMethodPool q;
+  static org.jikesrvm.compilers.opt.ir.BooleanCmp2 b;
 }
