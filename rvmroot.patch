Index: build.xml
===================================================================
--- build.xml	(revision 11903)
+++ build.xml	(working copy)
@@ -792,7 +792,7 @@
     </condition>
     
     <!--
-     FIXME: When we can capture the primordials based on reacability we will not need to delete class dir
+     FIXME: When we can capture the primordials based on reachability we will not need to delete class dir
      here. We will also be able to compile ALL classes in one sweep.
     -->
     <delete dir="${build.classes}"/>
@@ -802,8 +802,8 @@
            debugLevel="lines,source"
            source="1.5"
            target="1.5"
-           srcdir="${main.java}:${classlib.library-interface.common.java}:${classlib.library-interface.cpl.java}:${classlib.library-interface.non-cpl.java}"
-           sourcepath="${mmtk.java}:${generated.java}:${generated.config.java}:${generated.arch.java}:${generated.java}:${main.java}:${mmtk-rvm.java}">
+           srcdir="projects/dbt/ext:${main.java}:${classlib.library-interface.common.java}:${classlib.library-interface.cpl.java}:${classlib.library-interface.non-cpl.java}"
+           sourcepath="${mmtk.java}:${generated.java}:${generated.config.java}:${generated.arch.java}:${generated.java}:projects/dbt/ext:${main.java}:${mmtk-rvm.java}">
       <bootclasspath>
         <pathelement location="${classpath.lib.dir}/classpath.jar"/>
       </bootclasspath>
@@ -862,7 +862,7 @@
     </javac>
   </target>
 
-  <target name="package" depends="compile,compile-vmmagic">
+  <target name="package" depends="compile,compile-vmmagic,compile-projects">
     <!-- create a rt.jar for the RVM -->
     <copy file="${classpath.lib.dir}/classpath.jar" tofile="${build.rt.jar}"/>
     <zip destfile="${build.rt.jar}" update="true" basedir="${build.classes}">
@@ -881,7 +881,20 @@
     </jar>
   </target>
 
+  <!-- **************************************************************************** -->
+  <!-- *                                                                          * -->
+  <!-- *             Section for compiling and packaging external projects        * -->
+  <!-- *                                                                          * -->
+  <!-- **************************************************************************** -->
 
+  <target name="compile-projects"
+          depends="compile"
+          description="Build any projects included with the RVM">
+    <subant target="" inheritall="true">
+      <fileset dir="projects" includes="*/build.xml" />
+    </subant>
+  </target>
+
   <!-- **************************************************************************** -->
   <!-- *                                                                          * -->
   <!-- *                Section for building the boot image                       * -->
Index: rvm/src-generated/opt-ir/InstructionFormatList.dat
===================================================================
--- rvm/src-generated/opt-ir/InstructionFormatList.dat	(revision 11903)
+++ rvm/src-generated/opt-ir/InstructionFormatList.dat	(working copy)
@@ -149,6 +149,14 @@
 "U Cond OPT_ConditionOperand" "U BranchProfile OPT_BranchProfileOperand"
 
 
+BooleanCmp2
+1 0 8
+"D Result OPT_RegisterOperand" "U Val1 OPT_Operand" "U Val2 OPT_Operand" \
+"U Cond1 OPT_ConditionOperand" "U BranchProfile1 OPT_BranchProfileOperand" \
+"U Val3 OPT_Operand" "U Val4 OPT_Operand" \
+"U Cond2 OPT_ConditionOperand" "U BranchProfile2 OPT_BranchProfileOperand"
+
+
 CondMove
 1 0 5
 "D Result OPT_RegisterOperand" "U Val1 OPT_Operand" "U Val2 OPT_Operand" \
Index: rvm/src-generated/opt-ir/OperatorList.dat
===================================================================
--- rvm/src-generated/opt-ir/OperatorList.dat	(revision 11903)
+++ rvm/src-generated/opt-ir/OperatorList.dat	(working copy)
@@ -1255,6 +1255,20 @@
 
 
 
+# Compare two sets of two int values and put the boolean OR in the result register
+BOOLEAN_CMP2_INT_OR
+BooleanCmp2
+compare
+
+
+
+# Compare two sets of two int values and put the boolean AND in the result register
+BOOLEAN_CMP2_INT_AND
+BooleanCmp2
+compare
+
+
+
 # Load a singed byte
 # NOTE: Because of our strategy of using explict guard instructions, there is no
 # way in the HIR/LIR that the actual load instruction can except.
Index: rvm/src/org/jikesrvm/opt/VM_OptCompiledMethod.java
===================================================================
--- rvm/src/org/jikesrvm/opt/VM_OptCompiledMethod.java	(revision 11903)
+++ rvm/src/org/jikesrvm/opt/VM_OptCompiledMethod.java	(working copy)
@@ -90,7 +90,7 @@
     int bci = _mcMap.getBytecodeIndexForMCOffset(instructionOffset);
     VM_NormalMethod realMethod = _mcMap.getMethodForMCOffset(instructionOffset);
     if (bci == -1 || realMethod == null)
-      VM.sysFail( "Mapping to source code location not available at Dynamic Linking point\n");
+	VM.sysFail( "Mapping to source code location not available at Dynamic Linking point\n" + bci + " " + realMethod + " " + instructionOffset.toInt());
     realMethod.getDynamicLink(dynamicLink, bci);
   }
 
Index: rvm/src/org/jikesrvm/opt/VM_OptLinker.java
===================================================================
--- rvm/src/org/jikesrvm/opt/VM_OptLinker.java	(revision 11903)
+++ rvm/src/org/jikesrvm/opt/VM_OptLinker.java	(working copy)
@@ -41,7 +41,7 @@
     int bci = map.getBytecodeIndexForMCOffset(offset);
     VM_NormalMethod realMethod = map.getMethodForMCOffset(offset);
     if (bci == -1 || realMethod == null)
-      VM.sysFail("Mapping to source code location not available at Dynamic Linking point\n");
+      VM.sysFail( "Mapping to source code location not available at Dynamic Linking point\n" + bci + " " + realMethod);
     VM_BytecodeStream bcodes = realMethod.getBytecodes();
     bcodes.reset(bci);
     int opcode = bcodes.nextInstruction();
Index: rvm/src/org/jikesrvm/opt/ir/OPT_CallSiteTreeNode.java
===================================================================
--- rvm/src/org/jikesrvm/opt/ir/OPT_CallSiteTreeNode.java	(revision 11903)
+++ rvm/src/org/jikesrvm/opt/ir/OPT_CallSiteTreeNode.java	(working copy)
@@ -29,11 +29,11 @@
   /**
    * The call site represented by this tree node
    */
-  public OPT_InlineSequence callSite;
+  public final OPT_InlineSequence callSite;
 
   /**
    * The position of this call site in the binary encoding.  It is set
-   * when by VM_OptEncodedCallSiteTree.getEncoding.
+   * by VM_OptEncodedCallSiteTree.getEncoding.
    *
    * @see VM_OptEncodedCallSiteTree#getEncoding
    */
Index: rvm/src/org/jikesrvm/VM_RuntimeCompiler.java
===================================================================
--- rvm/src/org/jikesrvm/VM_RuntimeCompiler.java	(revision 11903)
+++ rvm/src/org/jikesrvm/VM_RuntimeCompiler.java	(working copy)
@@ -94,7 +94,7 @@
 
   // Cache objects needed to cons up compilation plans
   // TODO: cutting link to opt compiler by declaring type as object.
-  public static Object /* OPT_Options */ options;
+  public static final Object /* OPT_Options */ options = VM.BuildForAdaptiveSystem ? new OPT_Options() : null;
   public static Object /* OPT_OptimizationPlanElement[] */ optimizationPlan;
 
   /**
@@ -567,7 +567,6 @@
       VM_Callbacks.addExitMonitor(new VM_RuntimeCompiler());
     }
     if (VM.BuildForAdaptiveSystem) {
-      options = new OPT_Options();
       optimizationPlan = OPT_OptimizationPlanner.createOptimizationPlan((OPT_Options)options);
       if (VM.MeasureCompilation) {
         OPT_OptimizationPlanner.initializeMeasureCompilation();
Index: rvm/src/OptDummy.java
===================================================================
--- rvm/src/OptDummy.java	(revision 11903)
+++ rvm/src/OptDummy.java	(working copy)
@@ -20,4 +20,5 @@
   static org.jikesrvm.opt.OPT_Compiler a;
   static org.jikesrvm.opt.VM_OptSaveVolatile g;
   static org.jikesrvm.opt.OPT_SpecializedMethodPool q;
+  static org.jikesrvm.opt.ir.BooleanCmp2 b;
 }
