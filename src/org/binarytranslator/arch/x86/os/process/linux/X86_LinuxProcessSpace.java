/*
 * This file is part of binarytranslator.org. The binarytranslator.org
 * project is distributed under the Common Public License (CPL).
 * A copy of the license is included in the distribution, and is also
 * available at http://www.opensource.org/licenses/cpl1.0.php
 *
 * (C) Copyright Ian Rogers, The University of Manchester 2003-2006
 */
package org.binarytranslator.arch.x86.os.process.linux;

import org.binarytranslator.DBT_Options;
import org.binarytranslator.generic.os.abi.linux.LinuxStackInitializer;
import org.binarytranslator.generic.os.abi.linux.LinuxSystemCallGenerator;
import org.binarytranslator.generic.os.abi.linux.LinuxSystemCalls;
import org.binarytranslator.arch.x86.os.process.X86_ProcessSpace;
import org.binarytranslator.arch.x86.os.process.X86_Registers;
import org.binarytranslator.arch.x86.os.abi.linux.X86_LinuxSystemCalls;
import org.binarytranslator.generic.os.loader.Loader;

/**
 * Linux specific parts of the process
 */
public class X86_LinuxProcessSpace extends X86_ProcessSpace implements LinuxSystemCallGenerator {
  /**
   * System calls object for handling system calls generated by this process
   */
  LinuxSystemCalls syscalls;

  /**
   * The top of the bss segment
   */
  private int brk;

  /**
   * Constructor
   */
  public X86_LinuxProcessSpace(Loader loader) {
    syscalls = new X86_LinuxSystemCalls(this);
  }

  /**
   * Initialise the process space
   * @param loader the loader that's created the process space
   * @param pc the entry point
   * @param brk the initial value for the top of BSS
   * @param args command line arguments
   */
  public void initialise(Loader loader, int pc, int brk, String args[]) {
    registers.eip = pc;
    this.brk = brk;
    registers.writeGP32(X86_Registers.ESP, initialiseStack(loader, pc, args));
  }

  /**
   * Initialise the stack
   */
  private int initialiseStack(Loader loader, int pc, String args[]) {
    int[] auxVector = {LinuxStackInitializer.AuxiliaryVectorType.AT_SYSINFO, 0xffffe400,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_SYSINFO_EHDR, 0xffffe000,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_HWCAP, 0x78bfbff,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_PAGESZ, 0x1000,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_CLKTCK, 0x64,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_PHDR, 0xBADADD8E,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_PHNUM, 0xBAD2BAD2,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_BASE, 0x0,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_FLAGS, 0x0,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_ENTRY, pc,

                       LinuxStackInitializer.AuxiliaryVectorType.AT_UID, DBT_Options.UID,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_EUID, DBT_Options.UID,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_GID, DBT_Options.GID,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_EGID, DBT_Options.GID,

                       LinuxStackInitializer.AuxiliaryVectorType.AT_SECURE, 0,
                       //                       LinuxStackInitializer.AuxiliaryVectorType.AT_PLATFORM, LinuxStackInitializer.AuxiliaryVectorType.STACK_TOP - getPlatformString().length,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_NULL, 0x0};

    /* The cache sizes and flags are as for a test program running on 
       the iBook, softwood. AT_BASE will need to be changed for dynamically linked binaries. */

    /* Environment variables, exactly as on softwood. Not that the number 8380 in SSH_* varies. */
    String[] env = {"HOSTNAME=softwood", "PVM_RSH=/usr/bin/rsh", 
                    "HOST_JAVA_HOME=/home/amulocal/linux/appl/j2sdk1.4.2", "SHELL=/bin/bash",
                    "TERM=xterm", "HISTSIZE=1000", "SSH_CLIENT=130.88.194.110 8380 22",
                    "CVSROOT=/home/simgroup/cvsroot", "QTDIR=/usr/lib/qt-3.1", "SSH_TTY=/dev/pts/0",
                    "RVM_HOST_CONFIG=/home/matleyr/cvs/rvm/config/i686-pc-linux-gnu.ManCS",
                    "USER=matleyr", "LS_COLORS=no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=00;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.bz=00;31:*.tz=00;31:*.rpm=00;31:*.cpio=00;31:*.jpg=00;35:*.gif=00;35:*.bmp=00;35:*.xbm=00;35:*.xpm=00;35:*.png=00;35:*.tif=00;35:", "XENVIRONMENT=/home/matleyr/.Xdefaults",
                    "PVM_ROOT=/usr/share/pvm3", "CLASSPATH_ROOT=/home/matleyr/cvs/classpath",
                    "PATH=/home/matleyr/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/opt/lib/j2re1.3.1/bin:/home/matleyr/cvs/rvm/bin:/home/matleyr/bin", "MAIL=/var/spool/mail/matleyr",
                    "_=/bin/bash", "PWD=/home/matleyr/dhry", "INPUTRC=/etc/inputrc",
                    "LANG=en_GB.iso88591", "LAMHELPFILE=/etc/lam/lam-helpfile",
                    "SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass",
                    "CSHOME=matleyr@antigua.cs.man.ac.uk:/home/M03/cc/matleyr", "HOME=/home/matleyr",
                    "SHLVL=1", "SIM=/home/simgroup/matleyr", "XPVM_ROOT=/usr/share/pvm3/xpvm",
                    "RVM_ROOT=/home/matleyr/cvs", "LOGNAME=matleyr", "PRINTER=happy_duplex",
                    "SSH_CONNECTION=130.88.194.110 2380 130.88.198.215 22",
                    "LESSOPEN=|/usr/bin/lesspipe.sh %s", "RVM_BUILD=/tmp/RVMbuild",
                    "DISPLAY=localhost:10.0",
                    "RVM_TARGET_CONFIG=/home/matleyr/cvs/rvm/config/i686-pc-linux-gnu.ManCS",
                    "G_BROKEN_FILENAMES=1"};

    return LinuxStackInitializer.stackInit(memory, 0xC0000000, args, env, auxVector);
  }

  /**
   * Entry point for system calls
   */
  public void doSysCall() {
    syscalls.doSysCall();
  }

  /**
   * Return the system call number
   */
  public int getSysCallNumber() {
    return registers.readGP32(X86_Registers.EAX);
  }

  public int[] getSysCallArguments(int n) {
    int[] args = new int[n];
    if (n <= 6) {
      int[] order = {X86_Registers.EBX,  X86_Registers.ECX, X86_Registers.EDX, X86_Registers.ESI, X86_Registers.EDI, X86_Registers.EBP};

      for (int i = 0; i < n; i++) {
        args[i] = registers.readGP32(order[i]);
      }
    } else {
      throw new Error("We should check this");
//       for (int i = 0; i < n; i++) {
//         args[i] = memory.load32(registers.readGP32(X86_Registers.EBX) + (i * 4));
//       }
    }

    return args;
  }

  public void setSysCallReturn(int r) {
    registers.writeGP32(X86_Registers.EAX, r);
  }

  public void setSysCallError(int r) {    
    registers.writeGP32(X86_Registers.EAX, -r);
  }

  /**
   * Get the top of the BSS segment (the heap that reside below the
   * stack in memory)
   * @return top of BSS segment
   */
  public int getBrk() {
    return brk;
  }
  /**
   * Set the top of the BSS segment (the heap that reside below the
   * stack in memory)
   * @param address new top of BSS segment
   */
  public void setBrk(int address) {
    brk = address;
  }

  public void setStackPtr(int ptr) {}

  public int[] getAuxVector() { //ELF_Header header, ELF_ProgramHeaderTable programHeaders) {
    /*
    return new int[] {
      32, 0xffffe400,
      33, 0xffffe000,
      ELF_Constants.AT_HWCAP, 0x78bfbff,
      ELF_Constants.AT_PAGESZ, 0x1000,
      ELF_Constants.AT_CLKTCK, 0x64,
      ELF_Constants.AT_PHDR, header.e_phoff - programHeaders.getSegment(0).p_offset + programHeaders.getSegment(0).p_vaddr,
      ELF_Constants.AT_PHNUM, header.e_phnum,
      ELF_Constants.AT_BASE, 0x0,
      ELF_Constants.AT_FLAGS, 0x0,
      ELF_Constants.AT_ENTRY, header.e_entry,
      ELF_Constants.AT_UID, ELF_Constants.UID, 
      ELF_Constants.AT_EUID, ELF_Constants.UID,
      ELF_Constants.AT_GID, ELF_Constants.GID, 
      ELF_Constants.AT_EGID, ELF_Constants.GID,
      ELF_Constants.AT_SECURE, 0,
      ELF_Constants.AT_PLATFORM, ELF_Constants.STACK_TOP - getPlatformString().length,
      ELF_Constants.AT_NULL, 0x0,  
    };
    */
    throw new Error("TODO");
  }

  public byte[] getPlatformString() {
    return new byte[] {'\0', '6', '8', '6', 'i'};
  }
}
