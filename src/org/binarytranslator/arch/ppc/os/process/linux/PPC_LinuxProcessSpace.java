/*
 * This file is part of binarytranslator.org. The binarytranslator.org
 * project is distributed under the Common Public License (CPL).
 * A copy of the license is included in the distribution, and is also
 * available at http://www.opensource.org/licenses/cpl1.0.php
 *
 * (C) Copyright Ian Rogers, The University of Manchester 2003-2006
 */
package org.binarytranslator.arch.ppc.os.process.linux;

import org.binarytranslator.DBT_Options;
import org.binarytranslator.arch.ppc.os.process.PPC_ProcessSpace;
import org.binarytranslator.arch.ppc.os.abi.linux.PPC_LinuxSystemCalls;
import org.binarytranslator.generic.os.abi.linux.LinuxStackInitializer;
import org.binarytranslator.generic.os.abi.linux.LinuxSystemCallGenerator;
import org.binarytranslator.generic.os.abi.linux.LinuxSystemCalls;
import org.binarytranslator.generic.os.loader.Loader;

/** 
 * Simulate the process address space for our PowerPC ELF binary. Also keep track of register contents 
 *      (currently only those used in user models UISA and VEA). 
 *
 * @author Richard Matley, Ian Rogers
 *
 */
final public class PPC_LinuxProcessSpace extends PPC_ProcessSpace implements LinuxSystemCallGenerator
{
  /**
   * System calls object for handling system calls generated by this process
   */
  final LinuxSystemCalls syscalls;

  /**
   * The top of the bss segment
   */
  private int brk;

  /**
   * The top of the stack
   */
  private static final int STACK_TOP = 0x80000000;

  /**
   * Constructor
   */
  public PPC_LinuxProcessSpace(Loader loader) {
    syscalls = new PPC_LinuxSystemCalls(this);
  }

  /**
   * Initialise the process space, called after the binary has been
   * loaded
   * @param pc the entry point
   * @param brk the initial value for the top of BSS
   * @param args command line arguments
   */
  public void initialise(Loader loader, int pc, int brk, String args[]) {
    this.pc = pc;
    this.brk = brk;
    this.r1 = initialiseStack(loader, pc, args);
  }

  /**
   * Initialise the stack
   */
  private int initialiseStack(Loader loader, int pc, String args[]) {
    int[] auxVector = {LinuxStackInitializer.AuxiliaryVectorType.AT_IGNOREPPC,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_IGNOREPPC,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_IGNOREPPC,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_IGNOREPPC,

                       LinuxStackInitializer.AuxiliaryVectorType.AT_DCACHEBSIZE, 0x00,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_ICACHEBSIZE, 0x00,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_UCACHEBSIZE, 0x0,

                       LinuxStackInitializer.AuxiliaryVectorType.AT_HWCAP, 0x9c000000, 
                       
                       LinuxStackInitializer.AuxiliaryVectorType.AT_PAGESZ, 0x1000,
                       
                       LinuxStackInitializer.AuxiliaryVectorType.AT_CLKTCK, 0x64,

                       LinuxStackInitializer.AuxiliaryVectorType.AT_PHDR, 0xBADADD8E, // todo 
                       LinuxStackInitializer.AuxiliaryVectorType.AT_PHENT, 0xBAD1BAD1, // todo
                       LinuxStackInitializer.AuxiliaryVectorType.AT_PHNUM, 0xBAD2BAD2, // todo
                       LinuxStackInitializer.AuxiliaryVectorType.AT_BASE, 0x0, 
                       LinuxStackInitializer.AuxiliaryVectorType.AT_FLAGS, 0x0,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_ENTRY, pc,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_UID, DBT_Options.UID,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_EUID, DBT_Options.UID,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_GID, DBT_Options.GID,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_EGID, DBT_Options.GID,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_SECURE, 0x0,
                       LinuxStackInitializer.AuxiliaryVectorType.AT_NULL, 0x0};
    /* The cache sizes and flags are as for a test program running on 
       the iBook, softwood. AT_BASE will need to be changed for dynamically linked binaries. */

    return LinuxStackInitializer.stackInit(memory, STACK_TOP, args, getEnvironmentVariables(), auxVector);
  }

  /**
   * Entry point for system calls
   */
  public void doSysCall() {
    syscalls.doSysCall();
  }

  // -oO LinuxSystemCallGenerator interface Oo-

  /**
   * Return the system call number from the generator
   */
  public int getSysCallNumber() {
    return r0;
  }
  /**
   * Create an array of arguments for the system call
   * @param n number of system call arguments to read
   * @return array of system call argument values
   */
  public int[] getSysCallArguments(int n) {
    int args[] = new int[n];
    for (int i=0; i < n; i++) {
      args[i] = getRegister(3+i);
    }
    return args;
  }

  /**
   * Set the return value for a system call
   * @param r the return value
   */
  public void setSysCallReturn(int r) {
    r3 = r;
  }
  /**
   * Set an error value for a system call
   * @param r the error value
   */
  public void setSysCallError(int r) {
    r3 = r;
    cr |= 0x1;
  }

  /**
   * Get the top of the BSS segment (the heap that reside below the
   * stack in memory)
   * @return top of BSS segment
   */
  public int getBrk() {
    return brk;
  }
  /**
   * Set the top of the BSS segment (the heap that reside below the
   * stack in memory)
   * @param address new top of BSS segment
   */
  public void setBrk(int address) {
    brk = address;
  }

}
